// source: service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.audiosst.AudioFileInfo', null, global);
goog.exportSymbol('proto.audiosst.AudioSubbedInfo', null, global);
goog.exportSymbol('proto.audiosst.ExceptionMessage', null, global);
goog.exportSymbol('proto.audiosst.ResponseInfo', null, global);
goog.exportSymbol('proto.audiosst.ResponseInfo.ResponseOneofCase', null, global);
goog.exportSymbol('proto.audiosst.ResultSegment', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.audiosst.AudioFileInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.audiosst.AudioFileInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.audiosst.AudioFileInfo.displayName = 'proto.audiosst.AudioFileInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.audiosst.ResultSegment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.audiosst.ResultSegment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.audiosst.ResultSegment.displayName = 'proto.audiosst.ResultSegment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.audiosst.ResponseInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.audiosst.ResponseInfo.oneofGroups_);
};
goog.inherits(proto.audiosst.ResponseInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.audiosst.ResponseInfo.displayName = 'proto.audiosst.ResponseInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.audiosst.ExceptionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.audiosst.ExceptionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.audiosst.ExceptionMessage.displayName = 'proto.audiosst.ExceptionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.audiosst.AudioSubbedInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.audiosst.AudioSubbedInfo.repeatedFields_, null);
};
goog.inherits(proto.audiosst.AudioSubbedInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.audiosst.AudioSubbedInfo.displayName = 'proto.audiosst.AudioSubbedInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.audiosst.AudioFileInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.audiosst.AudioFileInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.audiosst.AudioFileInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.audiosst.AudioFileInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
audioBuff: msg.getAudioBuff_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.audiosst.AudioFileInfo}
 */
proto.audiosst.AudioFileInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.audiosst.AudioFileInfo;
  return proto.audiosst.AudioFileInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.audiosst.AudioFileInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.audiosst.AudioFileInfo}
 */
proto.audiosst.AudioFileInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudioBuff(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.audiosst.AudioFileInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.audiosst.AudioFileInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.audiosst.AudioFileInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.audiosst.AudioFileInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudioBuff_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes audio_buff = 1;
 * @return {string}
 */
proto.audiosst.AudioFileInfo.prototype.getAudioBuff = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes audio_buff = 1;
 * This is a type-conversion wrapper around `getAudioBuff()`
 * @return {string}
 */
proto.audiosst.AudioFileInfo.prototype.getAudioBuff_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudioBuff()));
};


/**
 * optional bytes audio_buff = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudioBuff()`
 * @return {!Uint8Array}
 */
proto.audiosst.AudioFileInfo.prototype.getAudioBuff_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudioBuff()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.audiosst.AudioFileInfo} returns this
 */
proto.audiosst.AudioFileInfo.prototype.setAudioBuff = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.audiosst.ResultSegment.prototype.toObject = function(opt_includeInstance) {
  return proto.audiosst.ResultSegment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.audiosst.ResultSegment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.audiosst.ResultSegment.toObject = function(includeInstance, msg) {
  var f, obj = {
text: jspb.Message.getFieldWithDefault(msg, 1, ""),
start: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
end: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.audiosst.ResultSegment}
 */
proto.audiosst.ResultSegment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.audiosst.ResultSegment;
  return proto.audiosst.ResultSegment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.audiosst.ResultSegment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.audiosst.ResultSegment}
 */
proto.audiosst.ResultSegment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.audiosst.ResultSegment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.audiosst.ResultSegment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.audiosst.ResultSegment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.audiosst.ResultSegment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStart();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getEnd();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.audiosst.ResultSegment.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.audiosst.ResultSegment} returns this
 */
proto.audiosst.ResultSegment.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float start = 2;
 * @return {number}
 */
proto.audiosst.ResultSegment.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.audiosst.ResultSegment} returns this
 */
proto.audiosst.ResultSegment.prototype.setStart = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float end = 3;
 * @return {number}
 */
proto.audiosst.ResultSegment.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.audiosst.ResultSegment} returns this
 */
proto.audiosst.ResultSegment.prototype.setEnd = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.audiosst.ResponseInfo.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.audiosst.ResponseInfo.ResponseOneofCase = {
  RESPONSE_ONEOF_NOT_SET: 0,
  E_MESSAGE: 1,
  RES_MESSAGE: 2
};

/**
 * @return {proto.audiosst.ResponseInfo.ResponseOneofCase}
 */
proto.audiosst.ResponseInfo.prototype.getResponseOneofCase = function() {
  return /** @type {proto.audiosst.ResponseInfo.ResponseOneofCase} */(jspb.Message.computeOneofCase(this, proto.audiosst.ResponseInfo.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.audiosst.ResponseInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.audiosst.ResponseInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.audiosst.ResponseInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.audiosst.ResponseInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
eMessage: (f = msg.getEMessage()) && proto.audiosst.ExceptionMessage.toObject(includeInstance, f),
resMessage: (f = msg.getResMessage()) && proto.audiosst.AudioSubbedInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.audiosst.ResponseInfo}
 */
proto.audiosst.ResponseInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.audiosst.ResponseInfo;
  return proto.audiosst.ResponseInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.audiosst.ResponseInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.audiosst.ResponseInfo}
 */
proto.audiosst.ResponseInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.audiosst.ExceptionMessage;
      reader.readMessage(value,proto.audiosst.ExceptionMessage.deserializeBinaryFromReader);
      msg.setEMessage(value);
      break;
    case 2:
      var value = new proto.audiosst.AudioSubbedInfo;
      reader.readMessage(value,proto.audiosst.AudioSubbedInfo.deserializeBinaryFromReader);
      msg.setResMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.audiosst.ResponseInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.audiosst.ResponseInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.audiosst.ResponseInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.audiosst.ResponseInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.audiosst.ExceptionMessage.serializeBinaryToWriter
    );
  }
  f = message.getResMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.audiosst.AudioSubbedInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExceptionMessage e_message = 1;
 * @return {?proto.audiosst.ExceptionMessage}
 */
proto.audiosst.ResponseInfo.prototype.getEMessage = function() {
  return /** @type{?proto.audiosst.ExceptionMessage} */ (
    jspb.Message.getWrapperField(this, proto.audiosst.ExceptionMessage, 1));
};


/**
 * @param {?proto.audiosst.ExceptionMessage|undefined} value
 * @return {!proto.audiosst.ResponseInfo} returns this
*/
proto.audiosst.ResponseInfo.prototype.setEMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.audiosst.ResponseInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.audiosst.ResponseInfo} returns this
 */
proto.audiosst.ResponseInfo.prototype.clearEMessage = function() {
  return this.setEMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.audiosst.ResponseInfo.prototype.hasEMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AudioSubbedInfo res_message = 2;
 * @return {?proto.audiosst.AudioSubbedInfo}
 */
proto.audiosst.ResponseInfo.prototype.getResMessage = function() {
  return /** @type{?proto.audiosst.AudioSubbedInfo} */ (
    jspb.Message.getWrapperField(this, proto.audiosst.AudioSubbedInfo, 2));
};


/**
 * @param {?proto.audiosst.AudioSubbedInfo|undefined} value
 * @return {!proto.audiosst.ResponseInfo} returns this
*/
proto.audiosst.ResponseInfo.prototype.setResMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.audiosst.ResponseInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.audiosst.ResponseInfo} returns this
 */
proto.audiosst.ResponseInfo.prototype.clearResMessage = function() {
  return this.setResMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.audiosst.ResponseInfo.prototype.hasResMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.audiosst.ExceptionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.audiosst.ExceptionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.audiosst.ExceptionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.audiosst.ExceptionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
error: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.audiosst.ExceptionMessage}
 */
proto.audiosst.ExceptionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.audiosst.ExceptionMessage;
  return proto.audiosst.ExceptionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.audiosst.ExceptionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.audiosst.ExceptionMessage}
 */
proto.audiosst.ExceptionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.audiosst.ExceptionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.audiosst.ExceptionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.audiosst.ExceptionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.audiosst.ExceptionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.audiosst.ExceptionMessage.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.audiosst.ExceptionMessage} returns this
 */
proto.audiosst.ExceptionMessage.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.audiosst.AudioSubbedInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.audiosst.AudioSubbedInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.audiosst.AudioSubbedInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.audiosst.AudioSubbedInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.audiosst.AudioSubbedInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
longText: jspb.Message.getFieldWithDefault(msg, 1, ""),
segmentsList: jspb.Message.toObjectList(msg.getSegmentsList(),
    proto.audiosst.ResultSegment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.audiosst.AudioSubbedInfo}
 */
proto.audiosst.AudioSubbedInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.audiosst.AudioSubbedInfo;
  return proto.audiosst.AudioSubbedInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.audiosst.AudioSubbedInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.audiosst.AudioSubbedInfo}
 */
proto.audiosst.AudioSubbedInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLongText(value);
      break;
    case 2:
      var value = new proto.audiosst.ResultSegment;
      reader.readMessage(value,proto.audiosst.ResultSegment.deserializeBinaryFromReader);
      msg.addSegments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.audiosst.AudioSubbedInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.audiosst.AudioSubbedInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.audiosst.AudioSubbedInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.audiosst.AudioSubbedInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLongText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSegmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.audiosst.ResultSegment.serializeBinaryToWriter
    );
  }
};


/**
 * optional string long_text = 1;
 * @return {string}
 */
proto.audiosst.AudioSubbedInfo.prototype.getLongText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.audiosst.AudioSubbedInfo} returns this
 */
proto.audiosst.AudioSubbedInfo.prototype.setLongText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ResultSegment segments = 2;
 * @return {!Array<!proto.audiosst.ResultSegment>}
 */
proto.audiosst.AudioSubbedInfo.prototype.getSegmentsList = function() {
  return /** @type{!Array<!proto.audiosst.ResultSegment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.audiosst.ResultSegment, 2));
};


/**
 * @param {!Array<!proto.audiosst.ResultSegment>} value
 * @return {!proto.audiosst.AudioSubbedInfo} returns this
*/
proto.audiosst.AudioSubbedInfo.prototype.setSegmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.audiosst.ResultSegment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.audiosst.ResultSegment}
 */
proto.audiosst.AudioSubbedInfo.prototype.addSegments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.audiosst.ResultSegment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.audiosst.AudioSubbedInfo} returns this
 */
proto.audiosst.AudioSubbedInfo.prototype.clearSegmentsList = function() {
  return this.setSegmentsList([]);
};


goog.object.extend(exports, proto.audiosst);
